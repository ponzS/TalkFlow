/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// noinspection JSUnusedGlobalSymbols
// Generated by unplugin-auto-import
// biome-ignore lint: disable
export {}
declare global {
  const API_URL: typeof import('./composables/ollamaService')['API_URL']
  const AutoHealingManager: typeof import('./composables/TalkFlowCore')['AutoHealingManager']
  const BuddyVerificationManager: typeof import('./composables/TalkFlowCore')['BuddyVerificationManager']
  const CreateNewGun: typeof import('./composables/useGun')['CreateNewGun']
  const EffectScope: typeof import('vue')['EffectScope']
  const GunStorageAdapter: typeof import('./composables/GunStorageAdapter')['default']
  const TalkFlowCore: typeof import('./composables/TalkFlowCore')['default']
  const addConversation: typeof import('./composables/useChatHistory')['addConversation']
  const addRelay: typeof import('./composables/useGun')['addRelay']
  const autoSaveStorageServ: typeof import('./composables/TalkFlowCore')['autoSaveStorageServ']
  const chat: typeof import('./composables/ollamaService')['chat']
  const cleanupGlobalKeyboardListeners: typeof import('./composables/useKeyboardManager')['cleanupGlobalKeyboardListeners']
  const closeScanner: typeof import('./composables/useScanner')['closeScanner']
  const computed: typeof import('vue')['computed']
  const createApp: typeof import('vue')['createApp']
  const createIsolatedGun: typeof import('./composables/useGun')['createIsolatedGun']
  const customRef: typeof import('vue')['customRef']
  const defineAsyncComponent: typeof import('vue')['defineAsyncComponent']
  const defineComponent: typeof import('vue')['defineComponent']
  const deleteConversation: typeof import('./composables/useChatHistory')['deleteConversation']
  const deriveTitleFromMessages: typeof import('./composables/useChatHistory')['deriveTitleFromMessages']
  const effectScope: typeof import('vue')['effectScope']
  const enabledPeers: typeof import('./composables/useGun')['enabledPeers']
  const fetchModels: typeof import('./composables/ollamaService')['fetchModels']
  const generateConversationId: typeof import('./composables/useChatHistory')['generateConversationId']
  const generateReply: typeof import('./composables/ollamaService')['generateReply']
  const getApiUrl: typeof import('./composables/ollamaService')['getApiUrl']
  const getConversation: typeof import('./composables/useChatHistory')['getConversation']
  const getCurrentInstance: typeof import('vue')['getCurrentInstance']
  const getCurrentScope: typeof import('vue')['getCurrentScope']
  const getGunSQLiteAdapter: typeof import('./composables/GunStorageAdapter')['getGunSQLiteAdapter']
  const getTalkFlowCore: typeof import('./composables/TalkFlowCore')['getTalkFlowCore']
  const getVerificationStatus: typeof import('./composables/TalkFlowCore')['getVerificationStatus']
  const gun: typeof import('./composables/useGun')['gun']
  const h: typeof import('vue')['h']
  const inject: typeof import('vue')['inject']
  const isProxy: typeof import('vue')['isProxy']
  const isReactive: typeof import('vue')['isReactive']
  const isReadonly: typeof import('vue')['isReadonly']
  const isRef: typeof import('vue')['isRef']
  const isVerified: typeof import('./composables/TalkFlowCore')['isVerified']
  const listConversations: typeof import('./composables/useChatHistory')['listConversations']
  const loadRelays: typeof import('./composables/useGun')['loadRelays']
  const markRaw: typeof import('vue')['markRaw']
  const needsSync: typeof import('./composables/TalkFlowCore')['needsSync']
  const nextTick: typeof import('vue')['nextTick']
  const onActivated: typeof import('vue')['onActivated']
  const onBeforeMount: typeof import('vue')['onBeforeMount']
  const onBeforeRouteLeave: typeof import('vue-router')['onBeforeRouteLeave']
  const onBeforeRouteUpdate: typeof import('vue-router')['onBeforeRouteUpdate']
  const onBeforeUnmount: typeof import('vue')['onBeforeUnmount']
  const onBeforeUpdate: typeof import('vue')['onBeforeUpdate']
  const onDeactivated: typeof import('vue')['onDeactivated']
  const onErrorCaptured: typeof import('vue')['onErrorCaptured']
  const onMounted: typeof import('vue')['onMounted']
  const onRenderTracked: typeof import('vue')['onRenderTracked']
  const onRenderTriggered: typeof import('vue')['onRenderTriggered']
  const onScopeDispose: typeof import('vue')['onScopeDispose']
  const onServerPrefetch: typeof import('vue')['onServerPrefetch']
  const onUnmounted: typeof import('vue')['onUnmounted']
  const onUpdated: typeof import('vue')['onUpdated']
  const onWatcherCleanup: typeof import('vue')['onWatcherCleanup']
  const openOrClose: typeof import('./composables/useScanner')['openOrClose']
  const openScanner: typeof import('./composables/useScanner')['openScanner']
  const peersList: typeof import('./composables/useGun')['peersList']
  const provide: typeof import('vue')['provide']
  const reactive: typeof import('vue')['reactive']
  const readonly: typeof import('vue')['readonly']
  const recreateGunWithPeers: typeof import('./composables/useGun')['recreateGunWithPeers']
  const ref: typeof import('vue')['ref']
  const removeRelay: typeof import('./composables/useGun')['removeRelay']
  const resolveComponent: typeof import('vue')['resolveComponent']
  const saveEnabledPeersToStorage: typeof import('./composables/useGun')['saveEnabledPeersToStorage']
  const savePeersListToStorage: typeof import('./composables/useGun')['savePeersListToStorage']
  const setApiUrl: typeof import('./composables/ollamaService')['setApiUrl']
  const setKeyboardManagerDebug: typeof import('./composables/useKeyboardManager')['setKeyboardManagerDebug']
  const setRelayEnabled: typeof import('./composables/useGun')['setRelayEnabled']
  const shallowReactive: typeof import('vue')['shallowReactive']
  const shallowReadonly: typeof import('vue')['shallowReadonly']
  const shallowRef: typeof import('vue')['shallowRef']
  const showToast: typeof import('./composables/useToast')['showToast']
  const streamChat: typeof import('./composables/ollamaService')['streamChat']
  const toRaw: typeof import('vue')['toRaw']
  const toRef: typeof import('vue')['toRef']
  const toRefs: typeof import('vue')['toRefs']
  const toValue: typeof import('vue')['toValue']
  const triggerRef: typeof import('vue')['triggerRef']
  const unref: typeof import('vue')['unref']
  const updateConversation: typeof import('./composables/useChatHistory')['updateConversation']
  const useAttrs: typeof import('vue')['useAttrs']
  const useAudioOutput: typeof import('./composables/useSetAudioMode')['useAudioOutput']
  const useBarkNotification: typeof import('./composables/useBarkNotification')['default']
  const useCall: typeof import('./composables/useGroupCall')['useCall']
  const useChatFlow: typeof import('./composables/TalkFlowCore')['useChatFlow']
  const useChatHistory: typeof import('./composables/useChatHistory')['useChatHistory']
  const useCssModule: typeof import('vue')['useCssModule']
  const useCssVars: typeof import('vue')['useCssVars']
  const useDateFormatter: typeof import('./composables/useDateFormatter')['useDateFormatter']
  const useDeviceTracking: typeof import('./composables/useDeviceTracking')['default']
  const useGroupChat: typeof import('./composables/useGroupChat')['useGroupChat']
  const useGroupVoiceBar: typeof import('./composables/useVoiceBarGroup')['useGroupVoiceBar']
  const useGunSQLiteAdapter: typeof import('./composables/GunStorageAdapter')['useGunSQLiteAdapter']
  const useId: typeof import('vue')['useId']
  const useKeyboardManager: typeof import('./composables/useKeyboardManager')['useKeyboardManager']
  const useLanguage: typeof import('./composables/useLanguage')['default']
  const useLink: typeof import('vue-router')['useLink']
  const useModel: typeof import('vue')['useModel']
  const useMoments: typeof import('./composables/useMoments')['default']
  const useNotifications: typeof import('./composables/useNotifications')['default']
  const useRoute: typeof import('vue-router')['useRoute']
  const useRouter: typeof import('vue-router')['useRouter']
  const useScanner: typeof import('./composables/useScanner')['useScanner']
  const useSegmentState: typeof import('./composables/useSegmentState')['useSegmentState']
  const useSlots: typeof import('vue')['useSlots']
  const useTemplateRef: typeof import('vue')['useTemplateRef']
  const useTheme: typeof import('./composables/useTheme')['useTheme']
  const useToast: typeof import('./composables/useToast')['useToast']
  const useTool: typeof import('./composables/useTool')['useTool']
  const useVoiceBar: typeof import('./composables/useVoiceBar')['useVoiceBar']
  const useWebLLMChat: typeof import('./composables/useWebLLMChat')['useWebLLMChat']
  const watch: typeof import('vue')['watch']
  const watchEffect: typeof import('vue')['watchEffect']
  const watchPostEffect: typeof import('vue')['watchPostEffect']
  const watchSyncEffect: typeof import('vue')['watchSyncEffect']
}
// for type re-export
declare global {
  // @ts-ignore
  export type { Component, Slot, Slots, ComponentPublicInstance, ComputedRef, DirectiveBinding, ExtractDefaultPropTypes, ExtractPropTypes, ExtractPublicPropTypes, InjectionKey, PropType, Ref, MaybeRef, MaybeRefOrGetter, VNode, WritableComputedRef } from 'vue'
  import('vue')
  // @ts-ignore
  export type { IGunSQLiteAdapter } from './composables/GunStorageAdapter'
  import('./composables/GunStorageAdapter')
  // @ts-ignore
  export type { BuddyVerificationManager, AutoHealingManager, KeyPair, LocalChatMessage, NetworkChatMessage, MessageReceipt, Buddy, VerifiedBuddy, ReceivedRequest, MessageType, MessageStatus, ChatPreview } from './composables/TalkFlowCore'
  import('./composables/TalkFlowCore')
  // @ts-ignore
  export type { ConversationRecord } from './composables/useChatHistory'
  import('./composables/useChatHistory')
  // @ts-ignore
  export type { DeviceRecord } from './composables/useDeviceTracking'
  import('./composables/useDeviceTracking')
  // @ts-ignore
  export type { CallState } from './composables/useGroupCall'
  import('./composables/useGroupCall')
  // @ts-ignore
  export type { GroupChatMessage } from './composables/useGroupChat'
  import('./composables/useGroupChat')
  // @ts-ignore
  export type { MomentV2, CommentHow } from './composables/useMoments'
  import('./composables/useMoments')
  // @ts-ignore
  export type { NotificationType, NotificationItem } from './composables/useNotifications'
  import('./composables/useNotifications')
  // @ts-ignore
  export type { UseSegmentStateOptions } from './composables/useSegmentState'
  import('./composables/useSegmentState')
  // @ts-ignore
  export type { ChatRole, ChatMessage } from './composables/useWebLLMChat'
  import('./composables/useWebLLMChat')
}
